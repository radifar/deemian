start: step+

?step: molecule_op | measurement | presentation

molecule_op: "molecule" IDENTIFIER "[" molecule_op_instruction+ "]" -> molecule_op
measurement: "measure" IDENTIFIER "[" measurement_instruction+ "]"  -> measurement
presentation: "present" IDENTIFIER "[" presentation_instruction+"]" -> presentation

molecule_op_instruction: "select" IDENTIFIER "=" entity (LOGIC~1..2 entity)* -> assign_selection
                       | "assign" "bond" IDENTIFIER "template" SMILES        -> bond_correction

measurement_instruction: "interactions" INTERACTION("," INTERACTION)*                     -> interaction_list
                       | "ionizable" CHARGE BOOLEAN                                       -> include_ionizable
                       | PREPOSITION IDENTIFIER (PREPOSITION IDENTIFIER)?                 -> interacting_subject
                       | PREPOSITION IDENTIFIER (PREPOSITION IDENTIFIER)? "as" IDENTIFIER -> interacting_subject_with_alias
                       | "conformation" INTEGER("," INTEGER)*                             -> conformation
                       | "conformation" INTEGER "to" INTEGER                              -> conformation_range

presentation_instruction: RESULTS("," RESULTS)* FILE_NAME -> readable_output
                        | "deemiandata" FILE_NAME         -> deemian_data

?entity: keyvalue | MACRO

keyvalue: "resname" IDENTIFIER("," IDENTIFIER)* -> resname
        | "resid" INTEGER("," INTEGER)*         -> resid
        | "resid" INTEGER "to" INTEGER          -> resid_range
        | "chain" IDENTIFIER("," IDENTIFIER)*   -> chain

MACRO: ("protein"|"hydrophobic"|"aromatic"|"charged"|"sugar"|"ion"|"metal"|"water"|"nucleic_acid")
LOGIC: ("AND"|"and"|"OR"|"or"|"NOT"|"not")
BOOLEAN: ("TRUE"|"true"|"FALSE"|"false")
INTERACTION: ("nonpolar"|"electrostatic"|"hydrogen_bond"|"pi"|"all")
PREPOSITION: ("ON"|"on"|"IN"|"in"|"BETWEEN"|"between"|"AND"|"and")
RESULTS: ("interactions"|"IPA"|"bitstring")
CHARGE: ("positive"|"negative")
FILE_NAME: /[0-9a-zA-Z_.\-]+/
IDENTIFIER: /[0-9a-zA-Z_.\-]+/
INTEGER: /[0-9]+/
// https://deepchem.readthedocs.io/en/2.4.0/api_reference/tokenizers.html
// https://stackoverflow.com/questions/74205361/how-to-parse-and-get-known-individual-elements-not-characters-from-a-smiles-st
SMILES: /(\[[^\]]+]|Br?|Cl?|N|O|S|P|F|I|b|c|n|o|s|p|\(|\)|\.|=|#|-|\+|\\\\|\/|:|~|@|\?|>|\*|\$|\%[0-9]{2}|[0-9])+/

%import common.WS
%ignore WS
